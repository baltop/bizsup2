CNGEC 스크래퍼 개발 인사이트
=========================================

사이트 정보:
- URL: http://www.cngec.or.kr/bbs/board.php?bo_table=notice
- 사이트 코드: cngec
- 기관명: 충남녹색환경지원센터

개발 일자: 2025-07-09

1. 사이트 구조 분석
===================

1.1 메인 페이지 구조
- 그누보드(GnuBoard) 기반 표준 게시판 시스템
- 표준 테이블 구조 사용 (td_subject 클래스)
- 페이지네이션 지원 (&page=N 파라미터)
- 공지사항과 일반 게시글 혼재 (bo_notice 클래스로 구분)

1.2 HTML 구조 특징
- 게시글 목록: tbody > tr > td.td_subject > a
- 게시글 ID: wr_id 파라미터로 식별
- 제목 추출: td.td_subject 안의 a 태그 텍스트
- 첨부파일 표시: 테이블에 파일 아이콘으로 표시

1.3 상세 페이지 구조
- 제목: span.bo_v_tit
- 메타 정보: section#bo_v_info 안의 strong.if_date
- 본문: div#bo_v_con
- 첨부파일: section#bo_v_file 안의 a.view_file_download
- 첨부파일 다운로드: /bbs/download.php?bo_table=notice&wr_id=N&no=M

2. 개발 과정에서 발견한 이슈
============================

2.1 공지사항 필터링 이슈
- 공지사항은 bo_notice 클래스로 구분됨
- 일반 게시글만 수집하기 위해 bo_notice 클래스 제외
- 해결: 클래스 검사 로직 추가

2.2 메타 정보 추출 문제
- 작성자 정보가 일관되지 않음 (대부분 "최고관리자")
- 날짜 형식이 특이함: "25-07-04 09:07" (YY-MM-DD HH:MM)
- 해결: 정규식을 이용한 날짜 파싱

2.3 첨부파일 크기 정보 추출
- 첨부파일 크기가 li 태그의 텍스트에 포함
- 파일명과 크기가 혼재된 구조
- 해결: 정규식을 이용한 크기 정보 파싱

3. 성공적인 구현 요소
=====================

3.1 사이트 분석 방법
- Playwright를 이용한 실제 브라우저 렌더링 분석
- 그누보드 표준 구조 분석
- 상세 페이지 HTML 구조 분석

3.2 스크래핑 전략
- BeautifulSoup을 이용한 HTML 파싱
- requests.Session을 이용한 세션 유지
- 적절한 User-Agent 헤더 설정
- 요청 간격 조절 (1초)

3.3 데이터 구조화
- 게시글별 개별 폴더 생성
- content.md + attachments/ 구조 사용
- 마크다운 형식으로 본문 저장
- 첨부파일 원본 파일명 유지
- 메타데이터 포함 (작성자, 날짜)

4. 한글 파일명 처리
===================

4.1 파일명 정리 방법
- 특수문자 제거: < > : " / \ | ? * → _
- 길이 제한: 200자 이하로 제한
- 확장자 보존

4.2 한글 지원 현황
- UTF-8 인코딩으로 완전 지원
- 한글 파일명 정상 처리됨 (38개 파일)
- 예시: "응시원서_기업지원.hwp", "직원 채용 계획안 및 채용 공고_기업지원,지역,홍성군 - 기간연장.pdf"

5. 첨부파일 다운로드 분석
=========================

5.1 성공 사례
- 대부분의 첨부파일 정상 다운로드 (38개)
- 다양한 파일 형식 지원 (hwp, pdf, xlsx, egg, zip)
- 대용량 파일 처리 가능 (158MB PDF 파일 포함)

5.2 동일 크기 파일 분석
- 113152 bytes: 응시원서 양식.hwp (2개)
- 61440 bytes: 응시원서 및 자기소개서.hwp (3개)
- 62976 bytes: 기업환경기술지원분야 직원계약직 채용 응시원서.hwp (3개)
- 원인: 동일한 서식 파일의 재사용 (정상적인 현상)

5.3 다운로드 검증
- Content-Type 헤더 확인
- HTML 응답 감지 및 제거
- 파일 크기 검증 (1KB 미만 파일 확인)
- 파일 내용 검증 (HTML 태그 포함 여부)

6. 스크래핑 성능
================

6.1 처리 속도
- 3페이지 41개 게시글 처리 시간: 101.21초
- 게시글당 평균 처리 시간: 2.47초
- 첨부파일 다운로드 포함 시간

6.2 수집 결과
- 총 게시글: 41개
- 첨부파일: 38개
- 성공률: 100% (모든 게시글 정상 처리)
- 오류: 0개

7. 개발 권장사항
================

7.1 기술적 권장사항
- requests.Session 사용으로 쿠키 및 세션 유지
- 적절한 User-Agent 설정
- 요청 간격 조절 (1초 이상)
- 파일 크기 및 내용 검증으로 오류 파일 감지
- 공지사항 필터링 로직 구현

7.2 구조적 권장사항
- 게시글별 개별 폴더 구성
- content.md + attachments/ 구조 사용
- 마크다운 형식 본문 저장
- 메타데이터 포함
- 통계 정보 JSON 저장

8. 특이사항
===========

8.1 사이트 특징
- 그누보드 기반 표준 게시판
- 공지사항과 일반 게시글 혼재
- 첨부파일 다운로드 시 세션 필요
- robots.txt 제한 존재하지만 접근 가능
- 날짜 형식이 특이함 (YY-MM-DD HH:MM)

8.2 콘텐츠 특징
- 주로 직원 채용공고, 연구사업 공고, 교육 안내
- 첨부파일이 많은 게시글 다수 (응시원서, 공고문 등)
- 한글 파일명 사용 빈번
- HWP, PDF, XLSX, EGG, ZIP 파일 형식 사용
- 대용량 파일 포함 (158MB PDF 파일 등)

9. 향후 개선 방안
=================

9.1 성능 최적화
- 병렬 처리 도입 검토
- 캐싱 메커니즘 구현
- 증분 업데이트 지원

9.2 데이터 품질 개선
- 중복 파일 감지 및 처리 (동일 서식 파일 식별)
- 파일 무결성 검증
- 메타데이터 확장 (조회수, 카테고리 등)

9.3 확장성 개선
- 다른 게시판 테이블 지원
- 그누보드 버전별 대응
- 설정 파일 기반 구성

10. 다른 스크래퍼와의 비교
=========================

10.1 CPRI와의 유사점
- 동일한 그누보드 기반 시스템
- 한글 파일명 처리 방식 동일
- 게시글별 폴더 구조 동일
- 마크다운 변환 방식 동일
- 파일 검증 로직 동일

10.2 CPRI와의 차이점
- 메타데이터 구조: CPRI (div 기반), CNGEC (section 기반)
- 날짜 형식: CPRI (YYYY-MM-DD), CNGEC (YY-MM-DD HH:MM)
- 첨부파일 구조: CPRI (div), CNGEC (section)
- 공지사항 처리: CPRI (포함), CNGEC (제외)

10.3 CNSINBO와의 차이점
- 게시판 시스템: CNSINBO (Spring MVC), CNGEC (그누보드)
- 링크 방식: CNSINBO (JavaScript onclick), CNGEC (일반 href)
- 파일 다운로드: CNSINBO (fileDown.do), CNGEC (download.php)
- 페이지네이션: CNSINBO (동적 URL), CNGEC (page 파라미터)

11. 결론
========

CNGEC 스크래퍼는 그누보드 기반 표준 게시판을 대상으로 하여 CPRI와 유사한 패턴으로 개발되었습니다. 주요 성공 요인은 공지사항 필터링, 메타데이터 파싱, 그리고 견고한 파일 다운로드 검증이었습니다.

CPRI 스크래퍼와의 높은 유사성으로 인해 많은 코드를 재사용할 수 있었으며, 그누보드 기반 사이트에 대한 일반적인 스크래핑 패턴을 확립할 수 있었습니다.

동일한 서식 파일로 인한 파일 크기 중복은 정상적인 현상이며, 이는 채용공고 사이트의 특성상 예상되는 결과입니다.

향후 유사한 그누보드 기반 게시판 개발 시 이 인사이트를 참고하여 더 효율적인 스크래퍼 개발이 가능할 것으로 예상됩니다.

개발자: Claude (Anthropic)
개발 도구: Python, BeautifulSoup, requests, html2text, Playwright (분석용)
테스트 환경: Linux, Python 3.x