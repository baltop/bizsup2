# GWRIIA (강원지역산업진흥원) 스크래퍼 개발 인사이트

## 사이트 정보
- **URL**: https://gw.riia.or.kr/board/notice
- **사이트 코드**: gwriia
- **사이트 이름**: 강원지역산업진흥원 공지사항 게시판
- **개발일**: 2025-07-14

## 사이트 구조 분석

### 1. 페이지 구조
- **목록 페이지**: 테이블 형태의 게시판 (table)
- **페이지네이션**: 하단 번호 링크를 통한 페이지 이동
- **게시글 수**: 페이지당 10-11개 게시글
- **총 게시글 수**: 많은 페이지 (정확한 수는 확인 필요)

### 2. 게시글 목록 구조
- **테이블 구조**: `table > tbody > tr > td`
- **컬럼 구성**: 번호, 제목, 접수기간, 상태, 작성일, 조회수 (6컬럼)
- **제목 셀**: 두 번째 td 내의 a 태그
- **상태 표시**: '진행중', '마감' 등의 상태 정보
- **공지글**: 번호 대신 '공지' 표시

### 3. 상세 페이지 구조
- **URL 형태**: `/board/notice/view/{UUID}`
- **UUID 사용**: 고유 식별자로 UUID 사용
- **내용 영역**: 특정 CSS 클래스가 없어 다양한 선택자로 시도
- **첨부파일**: 다양한 패턴의 링크 (`a[href*="download"]` 등)

## 기술적 특징

### 1. URL 패턴
- **기본 URL**: `https://gw.riia.or.kr/board/notice`
- **페이지네이션**: `?page={page_num}`
- **상세 페이지**: `/board/notice/view/{UUID}`
- **첨부파일**: 다양한 다운로드 링크 패턴

### 2. 첨부파일 처리
- **다운로드 방식**: 직접 다운로드 링크 방식
- **파일 형식**: HWP, PDF, ZIP, Excel, JPG, PNG 등 다양
- **한글 파일명**: UTF-8 완전 지원, 일부 URL 인코딩 (+로 공백 처리)
- **파일 크기**: 다양한 크기 (13KB ~ 15MB)

### 3. 콘텐츠 특성
- **언어**: 한국어
- **내용**: 정부기관 공지사항, 외부기관 공고 전달
- **상태 관리**: 진행중/마감 상태 표시
- **접수기간**: 명확한 접수 기간 표시

## 개발 과정에서 발견한 문제점과 해결책

### 1. 초기 연결 문제
**문제**: 500 Internal Server Error 발생
- 처음 접속 시 서버에서 500 에러 반환
- 단순한 User-Agent만으로는 접근 불가

**해결**: 완전한 브라우저 헤더 시뮬레이션
```python
self.session.headers.update({
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',
    'Accept-Encoding': 'gzip, deflate, br',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1'
})
```

### 2. 콘텐츠 추출 문제
**문제**: 일관된 콘텐츠 영역 클래스 부재
- 게시글 내용을 담는 특정 CSS 클래스가 없음
- 사이트마다 다른 구조

**해결**: 다중 선택자 시도
```python
content_selectors = [
    '.board-content',
    '.notice-content', 
    '.content',
    '.view-content',
    '.post-content',
    '.article-content'
]
```

### 3. 첨부파일 인식 문제
**문제**: 다양한 첨부파일 링크 패턴
- 표준화된 첨부파일 링크 구조 없음
- 다양한 다운로드 링크 형태

**해결**: 다중 패턴 검색
```python
attachment_selectors = [
    'a[href*="download"]',
    'a[href*="file"]',
    'a[href*="attach"]',
    '.attachment a',
    '.file-list a',
    '.download-link'
]
```

### 4. 파일명 처리 문제
**문제**: URL 인코딩된 파일명
- 한글 파일명이 URL 인코딩되어 있음
- 공백이 + 기호로 처리됨

**해결**: 파일명 그대로 사용
- 실제로는 정상적으로 다운로드됨
- 추가 디코딩 불필요

## 스크래핑 결과 분석

### 1. 수집 성과
- **총 게시글**: 31개 (3페이지)
- **총 첨부파일**: 38개
- **성공률**: 100% (모든 게시글 성공적으로 수집)

### 2. 파일 분포
- **HWP 파일**: 19개 (가장 많음)
- **PDF 파일**: 10개
- **ZIP 파일**: 2개
- **Excel 파일**: 2개
- **이미지 파일**: 5개 (JPG, PNG)

### 3. 파일 크기 분석
- **최소 크기**: 13KB (Excel 파일)
- **최대 크기**: 15MB (HWP 파일)
- **평균 크기**: 약 800KB
- **중복 파일**: 없음 (모든 파일이 다른 크기)

### 4. 게시글 유형
- **공지글**: 1개 (번호 대신 '공지' 표시)
- **일반 게시글**: 30개 (번호 74-103)
- **외부기관 공고**: 대부분 (타 기관 공고 전달)

## 최적화 포인트

### 1. 성능 최적화
- **500 에러 재시도**: 서버 불안정성 대응
- **요청 간격**: 1초 간격으로 서버 부하 최소화
- **세션 유지**: 연결 재사용으로 효율성 향상

### 2. 오류 처리
- **HTML 응답 감지**: Content-Type 확인
- **파일 크기 검증**: 1KB 미만 파일의 HTML 여부 확인
- **다중 선택자**: 콘텐츠 추출 실패 시 대안 방법

### 3. 데이터 품질
- **UUID 기반**: 고유 식별자로 중복 방지
- **메타데이터**: 상태, 접수기간 등 풍부한 정보
- **완전한 파일명**: 한글 파일명 완전 지원

## 사이트별 특징

### 1. 긍정적 특징
- **안정적인 구조**: 테이블 기반의 일관된 목록 구조
- **풍부한 메타데이터**: 상태, 접수기간, 조회수 등
- **다양한 파일 형식**: 다양한 첨부파일 지원
- **한글 완전 지원**: 파일명 인코딩 문제 없음

### 2. 개선 필요 사항
- **서버 안정성**: 초기 접속 시 500 에러 빈발
- **콘텐츠 구조**: 일관된 CSS 클래스 부재
- **첨부파일 구조**: 표준화된 링크 구조 필요

## 향후 개선 방안

### 1. 기능 확장
- **전체 페이지 스크래핑**: 모든 페이지 수집 옵션
- **상태별 필터링**: 진행중/마감 상태별 수집
- **기간별 필터링**: 접수기간 기준 필터링

### 2. 모니터링
- **서버 상태 모니터링**: 500 에러 발생 패턴 분석
- **콘텐츠 변화 감지**: 게시글 구조 변경 감지
- **파일 유효성 검증**: 다운로드 파일 무결성 확인

### 3. 데이터 활용
- **상태별 통계**: 진행중/마감 공고 통계
- **기관별 분류**: 외부기관 공고 분류
- **트렌드 분석**: 공고 유형별 트렌드 분석

## 결론

GWRIIA 사이트는 정부기관 특성상 안정적인 구조를 가지고 있지만, 초기 접속 시 서버 불안정성과 콘텐츠 구조의 비표준화가 주요 도전 과제였습니다.

주요 성공 요인:
1. 완전한 브라우저 헤더 시뮬레이션
2. 500 에러 재시도 메커니즘
3. 다중 선택자 시도
4. UUID 기반 고유 식별

이러한 접근 방식을 통해 높은 성공률과 안정성을 확보할 수 있었으며, 특히 다양한 파일 형식과 한글 파일명을 완전히 지원하는 것이 큰 장점입니다.

다만, 서버 측 개선(500 에러 해결, 표준화된 구조)이 이루어진다면 더욱 안정적인 스크래핑이 가능할 것으로 판단됩니다.