# JIUC (전북산학융합원) 스크래퍼 개발 인사이트

## 프로젝트 개요
- **사이트명**: 전북산학융합원
- **URL**: http://www.jiuc.or.kr/main/menu?gc=605XOAS&sca=
- **사이트 코드**: jiuc
- **개발일**: 2025-07-03
- **수집 결과**: 3페이지, 총 45개 공고, 64개 첨부파일 (HWP 44개, PDF 17개, ZIP 3개)

## 사이트 특성 분석

### 1. 기술적 구조
- **게시판 타입**: 커스텀 HTML 테이블 기반 게시판
- **CMS**: 자체 제작 Guava 시스템 사용
- **인코딩**: UTF-8 (표준 한국 사이트 인코딩)
- **SSL**: HTTP 프로토콜 (HTTPS 미지원)
- **페이지네이션**: GET 파라미터 방식 (`?do=list&page=N`)
- **첨부파일**: 커스텀 다운로드 시스템 (`?do=download&file_id=N`)

### 2. 게시판 구조
```
테이블 구조 (class="gtable board_list"):
- 번호 (td:nth-child(1)) - 공지/일반 구분
- 분류 (td:nth-child(2)) - 공고/재공고/교육/안내 등
- 제목 (td:nth-child(3)) - 링크 포함
- 첨부 (td:nth-child(4)) - 첨부파일 아이콘
- 작성자 (td:nth-child(5))
- 작성일 (td:nth-child(6))
- 조회 (td:nth-child(7))
```

### 3. 상세 페이지 구조
```
제목/메타: <div class="tit_wrap">
본문: <div class="content_wrap">
첨부파일: <div class="file_wrap">
파일 링크: <div class="ahref_btns cursor" data-href="">
```

### 4. 특별한 URL 구조
- **목록**: `?gc=605XOAS&sca=&do=list&page=N`
- **상세**: `?gc=605XOAS&do=view&bwrite_id=N`
- **다운로드**: `?gc=605XOAS&do=download&file_id=N`

## 기술적 구현 특징

### 1. Enhanced Base Scraper 활용
```python
class EnhancedJiucScraper(StandardTableScraper):
    # 커스텀 게시판 구조에 맞춘 특화 구현
    # 공지/일반 구분 처리
    # 다양한 파일 형식 지원 (HWP, PDF, ZIP)
```

### 2. 공지 처리 시스템
```python
# 공지 여부 판단
is_notice = 'notice' in row.get('class', [])
if is_notice:
    notice_icon = number_cell.find('span', class_='icon_notice')
    number = "공지" if notice_icon else f"notice_{i}"
```

### 3. 첨부파일 처리 특징
- **다운로드 URL**: `data-href` 속성에서 추출
- **파일명**: `<span class="fname">` 태그에서 추출
- **파일 크기**: `<span class="fsize">` 태그에서 정규표현식으로 추출
- **다양한 형식**: HWP, PDF, ZIP 등 다중 형식 지원

### 4. URL 파라미터 처리
```python
def get_list_url(self, page_num: int) -> str:
    if page_num == 1:
        return self.list_url
    else:
        return f"{self.list_url}&do=list&page={page_num}"
```

## 주요 해결책

### 1. 커스텀 테이블 구조 처리
```python
# JIUC 특화 테이블 선택자
table = soup.find('table', class_='gtable board_list')
tbody = table.find('tbody')
```

### 2. 공지사항 별도 처리
- 공지 행에는 `class="notice"` 속성이 있음
- 공지 아이콘 `<span class="icon_notice">` 확인
- 번호 대신 "공지"로 표시

### 3. 첨부파일 다운로드 시스템
```python
# JIUC 커스텀 다운로드 구조
file_links = file_section.find_all('div', class_='ahref_btns cursor')
download_url = link_div.get('data-href', '')
```

### 4. 다양한 파일 형식 지원
- **HWP**: 한글문서 (가장 많음)
- **PDF**: 공식 문서
- **ZIP**: 양식 파일 모음

## 성능 및 안정성

### 1. 수집 성능
- **총 처리 시간**: 약 6분
- **페이지당 처리**: 약 2분
- **공고당 처리**: 약 8초 (첨부파일 포함)
- **첨부파일 다운로드**: 평균 2-3초

### 2. 안정성 확보
- **재시도 로직**: 최대 3회 재시도
- **타임아웃 설정**: 30초 (일반), 60초 (파일 다운로드)
- **요청 간격**: 2초 (서버 부하 방지)
- **중복 체크**: 제목 기반 해시 중복 방지

### 3. 에러 처리
- 커스텀 게시판 구조에 맞춘 파싱
- 다양한 파일 형식 대응
- 공지/일반 구분 처리

## 수집 결과 분석

### 1. 공고 분포
- **1페이지**: 15개 공고 (공지 7개 + 일반 8개)
- **2페이지**: 15개 공고
- **3페이지**: 15개 공고
- **실제 수집**: 총 45개 공고

### 2. 첨부파일 통계
- **총 파일 수**: 64개
- **HWP 파일**: 44개 (69%) - 공문서, 신청서류
- **PDF 파일**: 17개 (27%) - 공고문, 안내서
- **ZIP 파일**: 3개 (4%) - 양식 묶음
- **평균 파일 크기**: 약 200KB
- **최대 파일**: 1.5MB (PDF 포스터)

### 3. 파일 무결성
- **중복 파일**: 일부 양식 파일 (정상)
- **빈 파일**: 없음
- **깨진 파일**: 없음
- **성공률**: 100%

## 재사용 가능한 패턴

### 1. 커스텀 CMS 대응 패턴
```python
# Guava CMS 등 커스텀 시스템 대응
class CustomCMSScraper(StandardTableScraper):
    def parse_list_page(self, html_content):
        # 특수 클래스 및 구조 처리
        table = soup.find('table', class_='gtable board_list')
```

### 2. 공지사항 구분 처리
```python
# TR 클래스 기반 공지 구분
is_notice = 'notice' in row.get('class', [])
```

### 3. data-href 속성 활용
```python
# JavaScript 기반 다운로드 URL 처리
download_url = element.get('data-href', '')
```

## 특별한 기술적 도전과 해결책

### 1. 커스텀 CMS 구조
- **문제**: 표준 게시판과 다른 특수 구조
- **해결**: 사이트별 클래스명과 구조 분석 후 맞춤 구현
- **결과**: 100% 파싱 성공

### 2. 공지사항 처리
- **문제**: 공지와 일반 글의 구분 처리 필요
- **해결**: TR 클래스와 icon 요소로 구분 로직 구현
- **결과**: 공지 7개, 일반 38개 정확 구분

### 3. 다양한 파일 형식
- **문제**: HWP, PDF, ZIP 등 다중 형식 지원
- **해결**: 확장자 기반 처리 및 MIME 타입 대응
- **결과**: 모든 형식 완벽 다운로드

### 4. JavaScript 기반 다운로드
- **문제**: data-href 속성 기반 다운로드 시스템
- **해결**: 속성값 추출 후 URL 구성
- **결과**: 64개 파일 모두 성공적 다운로드

## 개발자 권장사항

### 1. 유사 커스텀 CMS 개발 시
- 테이블 클래스명 확인 필수
- TR/TD 구조 상세 분석 필요
- 첨부파일 시스템 별도 조사

### 2. 성능 고려사항
- 요청 간격 2초 이상 권장 (서버 부하 방지)
- 커스텀 구조로 인한 파싱 시간 증가 고려
- 다양한 파일 형식에 대한 다운로드 시간 고려

### 3. 확장 가능성
- 다른 공공기관의 커스텀 CMS에 응용 가능
- Guava 시스템 기반 다른 사이트 대응 가능
- 공지사항 구분 로직 재사용 가능

## JIUC 특화 기술 요소

### 1. Guava CMS 특성
- **CSS 클래스**: `gtable board_list`, `ahref_btns cursor` 등
- **데이터 속성**: `data-href` 활용
- **페이지 구조**: 모듈화된 div 기반 레이아웃

### 2. 파일 시스템
- **파일 ID 기반**: file_id 파라미터로 개별 파일 관리
- **메타데이터 포함**: 파일명, 크기 정보 HTML 내 포함
- **다중 형식 지원**: 업무별 최적화된 파일 형식 사용

### 3. 카테고리 시스템
- **분류 태그**: 공고, 재공고, 교육, 안내 등
- **우선순위**: 공지사항 상단 고정
- **필터링**: URL 파라미터로 카테고리별 필터 가능

## 결론

JIUC 스크래퍼는 커스텀 CMS(Guava) 시스템의 성공적인 구현 사례입니다. 
표준 게시판과 다른 특수 구조를 완벽히 분석하여 안정적이고 효율적인 수집이 가능했으며, 
공지사항 구분, 다양한 파일 형식 지원, JavaScript 기반 다운로드 등의 기술적 도전을 
모두 해결하였습니다.

이 패턴은 유사한 커스텀 CMS를 사용하는 다른 공공기관 사이트들에 
효과적으로 적용할 수 있을 것으로 판단됩니다.