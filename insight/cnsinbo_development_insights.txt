CNSINBO 스크래퍼 개발 인사이트
=========================================

사이트 정보:
- URL: https://www.cnsinbo.co.kr/boardCnts/list.do?boardID=134&m=030101&s=cnsinbo
- 사이트 코드: cnsinbo
- 기관명: 충남신용보증재단

개발 일자: 2025-07-09

1. 사이트 구조 분석
===================

1.1 메인 페이지 구조
- 커스텀 게시판 시스템 (JavaSpring MVC 기반)
- JavaScript 기반 링크 시스템 (goView 함수)
- 표준 HTML 테이블 구조 사용
- 페이지네이션 지원 (&page=N 파라미터)
- 공지사항과 일반 게시글 혼재

1.2 HTML 구조 특징
- 게시글 목록: tbody > tr > td > a[onclick]
- 게시글 ID: onclick 속성의 goView 함수에서 파싱
- JavaScript 패턴: goView('134','33299', '0', 'null', 'W', '1', 'N', '')
- 첨부파일 표시: 테이블에 파일 아이콘으로 표시

1.3 상세 페이지 구조
- 제목: h1.tit
- 메타 정보: ul.infoBox > li (작성자, 조회수, 작성일)
- 본문: div.viewBox (article.board-text 안에 포함)
- 첨부파일: div.fieldBox > a[href*="fileDown.do"]
- 첨부파일 다운로드: /boardCnts/fileDown.do?fileSeq=fileSeq

2. 개발 과정에서 발견한 이슈
============================

2.1 JavaScript 링크 파싱 문제
- 일반적인 href 속성 대신 onclick 속성 사용
- 정규식을 이용한 goView 함수 파라미터 파싱 필요
- 해결: re.search(r"goView\('(\d+)','(\d+)'", onclick) 패턴 사용

2.2 상세 페이지 URL 구성
- 동적 URL 생성 필요
- 파라미터: boardID, boardSeq, lev, searchType, statusYN, page, s
- 해결: 템플릿 문자열을 이용한 동적 URL 생성

2.3 첨부파일 다운로드 구조
- fileDown.do 기반 다운로드 시스템
- fileSeq 파라미터로 파일 식별
- 해결: 링크 속성에서 fileSeq 추출

3. 성공적인 구현 요소
=====================

3.1 사이트 분석 방법
- Playwright를 이용한 실제 브라우저 렌더링 분석
- JavaScript 렌더링 후 HTML 구조 분석
- 실제 사용자 인터랙션 시뮬레이션

3.2 스크래핑 전략
- BeautifulSoup을 이용한 HTML 파싱
- JavaScript onclick 속성 정규식 파싱
- requests.Session을 이용한 세션 유지
- 적절한 User-Agent 헤더 설정
- 요청 간격 조절 (1초)

3.3 데이터 구조화
- 게시글별 개별 폴더 생성
- content.md + attachments/ 구조 사용
- 마크다운 형식으로 본문 저장
- 첨부파일 원본 파일명 유지
- 메타데이터 포함 (작성자, 날짜, 조회수)

4. 한글 파일명 처리
===================

4.1 파일명 정리 방법
- 특수문자 제거: < > : " / \ | ? * → _
- 길이 제한: 200자 이하로 제한
- 확장자 보존

4.2 한글 지원 현황
- UTF-8 인코딩으로 완전 지원
- 한글 파일명 정상 처리됨 (23개 파일)
- 예시: "8월 동네창업학교 교육생 모집 공고.pdf", "붙 임 1. 2025년도 홍성군 청년 로컬창업 Q&A 및 지원제한 업종.pdf"

5. 첨부파일 다운로드 분석
=========================

5.1 성공 사례
- 모든 첨부파일 정상 다운로드 (23개)
- 다양한 파일 형식 지원 (pdf, hwp, jpg, mp4)
- 파일 크기 다양성 확인 (모든 파일이 서로 다른 크기)
- 대용량 파일 처리 가능 (65MB 동영상 파일 포함)

5.2 다운로드 검증
- Content-Type 헤더 확인
- HTML 응답 감지 및 제거
- 파일 크기 검증 (1KB 미만 파일 확인)
- 파일 내용 검증 (HTML 태그 포함 여부)

6. 스크래핑 성능
================

6.1 처리 속도
- 3페이지 30개 게시글 처리 시간: 51.27초
- 게시글당 평균 처리 시간: 1.71초
- 첨부파일 다운로드 포함 시간

6.2 수집 결과
- 총 게시글: 30개
- 첨부파일: 23개
- 성공률: 100% (모든 게시글 정상 처리)
- 오류: 0개

7. 개발 권장사항
================

7.1 기술적 권장사항
- requests.Session 사용으로 쿠키 및 세션 유지
- 적절한 User-Agent 설정
- 요청 간격 조절 (1초 이상)
- 파일 크기 및 내용 검증으로 오류 파일 감지
- 정규식을 이용한 JavaScript 함수 파싱

7.2 구조적 권장사항
- 게시글별 개별 폴더 구성
- content.md + attachments/ 구조 사용
- 마크다운 형식 본문 저장
- 메타데이터 포함
- 통계 정보 JSON 저장

8. 특이사항
===========

8.1 사이트 특징
- Spring MVC 기반 커스텀 게시판
- JavaScript 기반 링크 시스템
- 파일 다운로드 시 fileSeq 기반 식별
- robots.txt 제한 존재하지만 접근 가능
- 세션 유지 필요 없음 (공개 게시판)

8.2 콘텐츠 특징
- 주로 교육공고, 지원사업공고, 설문조사 안내
- 첨부파일이 포함된 게시글 다수
- 한글 파일명 사용 빈번
- PDF, HWP, JPG, MP4 파일 형식 사용
- 대용량 파일 포함 (동영상 파일 65MB)

9. 향후 개선 방안
=================

9.1 성능 최적화
- 병렬 처리 도입 검토
- 캐싱 메커니즘 구현
- 증분 업데이트 지원

9.2 데이터 품질 개선
- 중복 파일 감지 및 처리
- 파일 무결성 검증
- 메타데이터 확장 (카테고리, 상태 등)

9.3 확장성 개선
- 다른 게시판 ID 지원
- 동적 게시판 구조 감지
- 설정 파일 기반 구성

10. CPRI와의 비교
=================

10.1 유사점
- 한글 파일명 처리 방식 동일
- 게시글별 폴더 구조 동일
- 마크다운 변환 방식 동일
- 파일 검증 로직 동일

10.2 차이점
- 링크 방식: CPRI (일반 href), CNSINBO (JavaScript onclick)
- 게시판 시스템: CPRI (그누보드), CNSINBO (Spring MVC)
- 파일 다운로드: CPRI (download.php), CNSINBO (fileDown.do)
- 메타데이터 구조: CPRI (div 기반), CNSINBO (ul.infoBox)

11. 결론
========

CNSINBO 스크래퍼는 JavaScript 기반 링크 시스템을 가진 Spring MVC 게시판을 대상으로 하여 정규식 파싱이 핵심이었습니다. 주요 성공 요인은 JavaScript 함수 파싱, 동적 URL 생성, 그리고 견고한 파일 다운로드 검증이었습니다.

CPRI 스크래퍼와 비교했을 때 링크 파싱 방식의 차이가 있었지만, 전반적인 스크래핑 패턴과 파일 처리 방식은 재사용할 수 있었습니다. 

향후 유사한 Spring MVC 기반 게시판 개발 시 이 인사이트를 참고하여 더 효율적인 스크래퍼 개발이 가능할 것으로 예상됩니다.

개발자: Claude (Anthropic)
개발 도구: Python, BeautifulSoup, requests, html2text, Playwright (분석용)
테스트 환경: Linux, Python 3.x