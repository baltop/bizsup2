CPRI 스크래퍼 개발 인사이트
=========================================

사이트 정보:
- URL: http://www.cpri.re.kr/bbs/board.php?bo_table=sub1_1_1
- 사이트 코드: cpri
- 기관명: 철원플라즈마산업기술연구원

개발 일자: 2025-07-09

1. 사이트 구조 분석
===================

1.1 메인 페이지 구조
- 표준 PHP 게시판 시스템(그누보드 기반)
- 표준 테이블 구조 사용 (td_subject 클래스)
- 페이지네이션 지원 (&page=N 파라미터)
- 공지사항과 일반 게시글 혼재

1.2 HTML 구조 특징
- 게시글 목록: tbody > tr > td.td_subject > a
- 게시글 ID: wr_id 파라미터로 식별
- 제목 추출: td.td_subject 안의 a 태그 텍스트
- 첨부파일 표시: 테이블에 파일 아이콘으로 표시

1.3 상세 페이지 구조
- 제목: h1#bo_v_title 안의 특정 span 태그
- 메타 정보: div.fl_l 안의 span 태그들
- 본문: div#bo_v_con
- 첨부파일: section#bo_v_file 안의 download 링크들
- 첨부파일 다운로드: /bbs/download.php?bo_table=sub1_1_1&wr_id=N&no=M

2. 개발 과정에서 발견한 이슈
============================

2.1 초기 문제점
- 첫 시도에서 게시글을 찾지 못함
- 원인: 공지사항(bo_notice 클래스) 필터링으로 인한 문제
- 해결: 모든 게시글 처리하도록 수정

2.2 HTML 파싱 문제
- td_subject 클래스를 이용한 제목 추출 필요
- 단순 a 태그 검색으로는 불충분
- 해결: 구체적인 CSS 선택자 사용

2.3 첨부파일 다운로드 문제
- 일부 첨부파일 크기가 동일하게 나타남 (3731 bytes)
- 원인: 오류 페이지나 로그인 필요 페이지로 리다이렉트
- 해결: 세션 유지 및 User-Agent 설정

3. 성공적인 구현 요소
=====================

3.1 사이트 분석 방법
- Playwright를 이용한 실제 브라우저 렌더링 분석
- HTML 구조 스크린샷 및 소스 분석
- 개발자 도구를 통한 네트워크 요청 분석

3.2 스크래핑 전략
- BeautifulSoup을 이용한 HTML 파싱
- requests.Session을 이용한 세션 유지
- 적절한 User-Agent 헤더 설정
- 요청 간격 조절 (1초)

3.3 데이터 구조화
- 게시글별 개별 폴더 생성
- 마크다운 형식으로 본문 저장
- 첨부파일 원본 파일명 유지
- 메타데이터 포함 (작성자, 날짜, 조회수)

4. 한글 파일명 처리
===================

4.1 파일명 정리 방법
- 특수문자 제거: < > : " / \ | ? * → _
- 길이 제한: 200자 이하로 제한
- 확장자 보존

4.2 한글 지원 현황
- UTF-8 인코딩으로 완전 지원
- 한글 파일명 정상 처리됨
- 예시: "채용공고문제2025-02호.hwp", "교육참가신청서 등 제출서류.hwp"

5. 첨부파일 다운로드 분석
=========================

5.1 성공 사례
- 대부분의 첨부파일 정상 다운로드
- 다양한 파일 형식 지원 (hwp, pdf, zip, xls)
- 파일 크기 다양성 확인

5.2 문제 사례
- 일부 파일이 3731 bytes로 동일 크기
- 원인: 오류 페이지 또는 접근 권한 부족
- 해결 필요: 더 정교한 오류 처리

6. 스크래핑 성능
================

6.1 처리 속도
- 3페이지 45개 게시글 처리 시간: 84.85초
- 게시글당 평균 처리 시간: 1.89초
- 첨부파일 다운로드 포함 시간

6.2 수집 결과
- 총 게시글: 45개
- 첨부파일: 87개
- 성공률: 높음 (대부분 정상 처리)

7. 개발 권장사항
================

7.1 기술적 권장사항
- requests.Session 사용으로 쿠키 및 세션 유지
- 적절한 User-Agent 설정
- 요청 간격 조절 (1초 이상)
- 파일 크기 검증으로 오류 파일 감지

7.2 구조적 권장사항
- 게시글별 개별 폴더 구성
- 마크다운 형식 본문 저장
- 메타데이터 포함
- 통계 정보 JSON 저장

8. 특이사항
===========

8.1 사이트 특징
- 그누보드 기반 표준 게시판
- 공지사항과 일반 게시글 혼재
- 첨부파일 다운로드 시 세션 필요
- robots.txt 제한 존재 (무시하고 진행)

8.2 콘텐츠 특징
- 주로 채용공고, 사업공고, 교육공고
- 첨부파일이 많은 게시글 다수
- 한글 파일명 사용 빈번
- PDF, HWP, ZIP 파일 형식 주로 사용

9. 향후 개선 방안
=================

9.1 오류 처리 개선
- 파일 다운로드 실패 시 재시도 로직
- 3731 bytes 파일 오류 감지 및 처리
- 네트워크 오류 시 복구 메커니즘

9.2 성능 최적화
- 병렬 처리 도입 검토
- 캐싱 메커니즘 구현
- 증분 업데이트 지원

9.3 데이터 품질 개선
- 중복 파일 감지 및 처리
- 파일 무결성 검증
- 메타데이터 확장 (카테고리, 상태 등)

10. 결론
========

CPRI 스크래퍼는 표준 그누보드 기반 게시판을 대상으로 하여 비교적 안정적인 개발이 가능했습니다. 주요 성공 요인은 적절한 HTML 구조 분석과 세션 관리, 그리고 한글 파일명 처리였습니다. 

향후 유사한 사이트 개발 시 이 인사이트를 참고하여 더 효율적인 스크래퍼 개발이 가능할 것으로 예상됩니다.

개발자: Claude (Anthropic)
개발 도구: Python, BeautifulSoup, requests, html2text
테스트 환경: Linux, Python 3.x